{"version":3,"file":"js/c3cf2d82ec9e670061f0.bundle.js","mappings":"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","sources":["webpack://codergb-hub-client/./src/hook/useLoginMsg/index.tsx","webpack://codergb-hub-client/./src/views/profile/pages/playlist/style.tsx","webpack://codergb-hub-client/./src/views/profile/pages/playlist/config.tsx","webpack://codergb-hub-client/./src/views/profile/pages/playlist/index.tsx"],"sourcesContent":["import { type Map } from 'immutable';\nimport { useSelector } from 'react-redux';\nimport { type ILogin } from '../../types/login/ILogin';\n\nexport const useLoginMsg = (): ILogin => {\n  const login = useSelector<Map<string, ILogin>, ILogin>((state) => {\n    return state.getIn(['loginReducer', 'login']) as ILogin;\n  });\n  return login;\n};\n","import styled from 'styled-components';\nexport const PlaylistWrapper = styled.div`\n  .title-label {\n    font-size: ${30 / 40}rem;\n    font-weight: bolder;\n    margin: 0 0 ${16 / 40}rem 0;\n  }\n`;\nexport const PlaylistItemWrapper = styled.div`\n  display: flex;\n  align-items: flex-start;\n  .left-container {\n    .img-container {\n      width: ${180 / 40}rem;\n      height: ${96 / 40}rem;\n      overflow: hidden;\n      img {\n        width: 100%;\n        border-radius: 4px;\n      }\n    }\n  }\n  .right-container {\n    margin: 0 0 0 ${24 / 40}rem;\n    .name {\n      font-size: ${20 / 40}rem;\n      font-weight: bold;\n      margin: 0 0 ${10 / 40}rem;\n      color: #0d0d0d;\n    }\n    .desc {\n      font-size: ${16 / 40}rem;\n      color: #909090;\n    }\n  }\n`;\n","import React from 'react';\nimport type { ColumnsType } from 'antd/es/table';\nimport { EyeInvisibleOutlined, EyeOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nimport { PlaylistItemWrapper } from './style';\nimport { IPlaylist } from '../../../../types/playlist/IPlaylist';\nimport { USER_PLAYLIST } from '../../../../constant/menu';\nimport { NavigateFunction } from 'react-router/dist/lib/hooks';\n\nconst playlistRouter = (item: IPlaylist, navigate: NavigateFunction) => {\n  navigate(`${USER_PLAYLIST}/${item.id}`, {\n    replace: false\n  });\n};\nconst columns = (navigate: NavigateFunction): ColumnsType<IPlaylist> => {\n  return [\n    {\n      title: '播放列表',\n      dataIndex: 'name',\n      render: (text: string, item) => {\n        return (\n          <PlaylistItemWrapper>\n            <div className=\"left-container\">\n              <div className=\"img-container\" onClick={(e) => playlistRouter(item, navigate)}>\n                <img src={item.picUrl} alt={item.name} />\n              </div>\n            </div>\n            <div className=\"right-container\">\n              <div className=\"right-msg\">\n                <p className=\"name\">{item.name}</p>\n                <p className=\"desc\">{item.description}</p>\n              </div>\n            </div>\n          </PlaylistItemWrapper>\n        );\n      }\n    },\n    {\n      title: '公开范围',\n      dataIndex: 'isPublic',\n      render: (text: string, item: IPlaylist) => {\n        const { isPublic } = item;\n        if (isPublic === 1) {\n          return <EyeOutlined />;\n        } else {\n          return <EyeInvisibleOutlined />;\n        }\n      }\n    },\n    {\n      title: '上次更新时间',\n      dataIndex: 'createTime',\n      sorter: (a, b) => new Date(a.createTime).getTime() - new Date(b.createTime).getTime(),\n      render: (time: string) => {\n        return moment(time).format('yyyy-MM-DD HH:mm');\n      }\n    },\n    {\n      title: '视频数',\n      dataIndex: 'video',\n      render: (video: number | null) => {\n        return video ? video : 0;\n      }\n    }\n  ];\n};\nexport { columns };\n","import React, { memo, FC, ReactElement, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Table } from 'antd';\nimport { PlaylistWrapper } from './style';\nimport { IPlaylist } from '../../../../types/playlist/IPlaylist';\nimport { getUserPlaylist } from '../../../../network/playlist';\nimport { useLoginMsg } from '../../../../hook/useLoginMsg';\nimport { IResponseType } from '../../../../types/responseType';\nimport { IPage } from '../../../../types/IPage';\nimport { IVideo } from '../../../../types/video/IVideo';\nimport { columns } from './config';\n\nconst Playlist: FC = (): ReactElement => {\n  const [playlist, setPlaylist] = useState<IPlaylist[]>([]);\n  const [count, setCount] = useState<number>(0);\n  const [selectionType, setSelectionType] = useState<'checkbox' | 'radio'>('checkbox');\n  const login = useLoginMsg();\n  const navigate = useNavigate();\n  const getUserPlaylistReq = (userId: string, offset: number, limit: number) => {\n    getUserPlaylist<IResponseType<IPage<IPlaylist[]>>>(userId, offset, limit).then((data) => {\n      if (data.status) {\n        setCount(data.data.count);\n        setPlaylist(data.data.list);\n      }\n    });\n  };\n  useEffect(() => {\n    getUserPlaylistReq(login.userMsg.userId, 0, 4);\n  }, []);\n  const rowSelection = {\n    onChange: (selectedRowKeys: React.Key[], selectedRows: IPlaylist[]) => {\n      console.log('selectedRows: ', selectedRows);\n    }\n  };\n  const pageChangeHandle = (e: number) => {\n    console.log(e);\n    getUserPlaylistReq(login.userMsg.userId, (e - 1) * 4, 4);\n  };\n  return (\n    <PlaylistWrapper>\n      <div className=\"title-label\">我的播放列表</div>\n      {playlist && playlist.length !== 0 && (\n        <Table\n          rowSelection={{\n            type: selectionType,\n            ...rowSelection\n          }}\n          rowKey={'id'}\n          columns={columns(navigate)}\n          dataSource={playlist}\n          pagination={{\n            pageSize: 4,\n            total: count,\n            onChange: (e) => pageChangeHandle(e)\n          }}\n        />\n      )}\n    </PlaylistWrapper>\n  );\n};\nexport default memo(Playlist);\n"],"names":["useSelector","useLoginMsg","login","state","getIn","styled","PlaylistWrapper","div","PlaylistItemWrapper","React","EyeInvisibleOutlined","EyeOutlined","moment","USER_PLAYLIST","playlistRouter","item","navigate","id","replace","columns","title","dataIndex","render","text","createElement","className","onClick","e","src","picUrl","alt","name","description","isPublic","sorter","a","b","Date","createTime","getTime","time","format","video","memo","useState","useEffect","useNavigate","Table","getUserPlaylist","Playlist","playlist","setPlaylist","count","setCount","selectionType","setSelectionType","getUserPlaylistReq","userId","offset","limit","then","data","status","list","userMsg","rowSelection","onChange","selectedRowKeys","selectedRows","console","log","pageChangeHandle","length","type","rowKey","dataSource","pagination","pageSize","total"],"sourceRoot":""}