{"version":3,"file":"static/js/5224.62a4da64.chunk.js","mappings":"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","sources":["webpack://codergb-hub-client/./src/components/content/detail/chatDetail/style.tsx","webpack://codergb-hub-client/./src/components/content/detail/chatDetail/childCpn/chatWindow/style.tsx","webpack://codergb-hub-client/./src/network/websocket/chat.ts","webpack://codergb-hub-client/./src/components/content/detail/chatDetail/childCpn/chatWindow/index.tsx","webpack://codergb-hub-client/./src/components/content/detail/chatDetail/index.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport chatWindow from '../../../../assets/img/chat-window.jpg';\n\nexport const ChatWrapper = styled.div`\n  .gb-content {\n    width: 100%;\n    background-image: url(${chatWindow});\n    background-size: cover;\n    background-repeat: no-repeat;\n    background-position: center;\n    background-attachment: fixed;\n    .gb-content-inner {\n      width: ${1620 / 40}rem;\n      margin: ${1 / 40}rem auto;\n      min-height: ${820 / 40}rem;\n      /*background-color: #f0f2f5;*/\n      .title {\n        background-color: #ffffff;\n        padding: ${15 / 40}rem ${20 / 40}rem ${15 / 40}rem;\n        border-radius: 10px;\n        margin: 0 0 ${15 / 40}rem;\n      }\n    }\n  }\n`;\n","import styled from 'styled-components';\nexport const ChatWindowWrapper = styled.div`\n  background-color: #ffffff;\n  .recent-title {\n    font-size: ${16 / 40}rem;\n    color: #666666;\n    padding: ${20 / 40}rem ${20 / 40}rem;\n    white-space: nowrap;\n    box-sizing: border-box;\n  }\n  .gb-chat-header {\n    height: 40px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  .gb-chat {\n    height: ${520 / 40}rem;\n    overflow-y: scroll;\n    background-color: #f4f5f7;\n    .chat-history {\n      & > li {\n        display: flex;\n        padding: ${20 / 40}rem 0;\n        align-items: flex-start;\n        .img-container {\n          width: ${50 / 40}rem;\n          border-radius: 50%;\n          overflow: hidden;\n          img {\n            width: 100%;\n          }\n        }\n        .content-container {\n          max-width: 90%;\n          margin: 0 0 0 ${10 / 40}rem;\n          .content {\n            max-width: 100%;\n            background-color: #ffffff;\n            padding: ${10 / 40}rem ${15 / 40}rem;\n            font-size: ${20 / 40}rem;\n            border-radius: ${24 / 40}rem;\n          }\n          .time {\n            font-size: ${16 / 40}rem;\n            color: #999999;\n            display: flex;\n            justify-content: flex-start;\n            margin: ${10 / 40}rem 0 0 ${5 / 40}rem;\n          }\n        }\n        &.active {\n          flex-direction: row-reverse;\n          .content {\n            margin: 0 ${10 / 40}rem 0 0;\n            background-color: #80b9f2;\n            color: #fff;\n          }\n          .time {\n            justify-content: flex-end;\n          }\n        }\n      }\n    }\n  }\n  .gb-chat-side {\n    min-width: ${320 / 40}rem!important;\n    max-width: ${320 / 40}rem!important;\n    width: ${320 / 40}rem!important;\n    .chat-queue {\n      & > li {\n        display: flex;\n        align-items: flex-start;\n        padding: ${10 / 40}rem ${15 / 40}rem;\n        cursor: pointer;\n        &:hover {\n          background-color: #e4e5e6;\n        }\n        &.active {\n          background-color: #e4e5e6;\n        }\n        .img-container {\n          width: ${70 / 40}rem;\n          border-radius: 50%;\n          overflow: hidden;\n          img {\n            width: 100%;\n          }\n        }\n        .right-container {\n          width: 70%;\n          background-color: transparent;\n          margin: 0 0 0 ${20 / 40}rem;\n          .user-name {\n            color: #333333;\n            font-size: ${18 / 40}rem;\n          }\n          .content {\n            color: #999999;\n            font-size: ${14 / 40}rem;\n            width: 100%;\n          }\n        }\n      }\n    }\n  }\n  .gb-chat-footer {\n    background-color: #ffffff;\n    border-top: 1px solid #e5e5e5;\n    height: ${200 / 40}rem;\n    padding: ${20 / 40}rem ${10 / 40}rem ${20 / 40}rem ${10 / 40}rem;\n    .publish-container {\n      padding: ${10 / 40}rem 0 0 0;\n      display: flex;\n      justify-content: flex-end;\n      .publish-btn {\n        display: inline-flex;\n        border: 1px solid #cccccc;\n        justify-content: center;\n        font-size: ${18 / 40}rem;\n        padding: ${5 / 40}rem ${10 / 40}rem;\n        cursor: pointer;\n        border-radius: 4px;\n      }\n    }\n    .ant-input {\n      border: none;\n      resize: none;\n      outline: none;\n      box-shadow: none;\n    }\n    .ant-input:focus {\n      border: none;\n      outline: none;\n    }\n  }\n`;\n","import { WEBSOCKET_HOST_NAME } from '../../constant/host';\nimport { type IResponseType } from '../../types/responseType';\n\nclass CommonWebSocket {\n  websocket: WebSocket;\n  constructor(url: string, params: any) {\n    const keys = Object.keys(params);\n    let query = '';\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      query += `${key}=${params[key]}${i === keys.length - 1 ? '' : '&'}`;\n    }\n    const socketUrl = `${url}?${query}`;\n    this.websocket = new WebSocket(`${WEBSOCKET_HOST_NAME}${socketUrl}`);\n  }\n\n  // 废弃\n  async getSocketMsg<T>() {\n    return await new Promise<IResponseType<T>>((resolve, reject) => {\n      this.websocket.onmessage = function (e) {\n        const res: IResponseType<T> = JSON.parse(e.data);\n        resolve(res);\n      };\n    });\n  }\n\n  sendSocketMsg(params: string) {\n    console.log(this.websocket.readyState);\n    this.websocket.send(params);\n  }\n}\nconst CHAT_QUEUE = '/chat/queue';\nconst CHAT = '/chat';\nconst CHAT_CONTENT = '/chat/content';\nexport { CommonWebSocket, CHAT_QUEUE, CHAT, CHAT_CONTENT };\n","import React, { type ChangeEvent, type FC, memo, useEffect, useState, useRef } from 'react';\nimport { Input, Layout } from 'antd';\nimport { ChatWindowWrapper } from './style';\nimport {\n  CHAT,\n  CHAT_CONTENT,\n  CHAT_QUEUE,\n  CommonWebSocket\n} from '../../../../../../network/websocket/chat';\nimport { useLoginMsg } from '../../../../../../hook/useLoginMsg';\nimport { type IChatQueue } from '../../../../../../types/chat/IChat';\nimport { type IPage } from '../../../../../../types/IPage';\nimport moment from 'moment';\nimport { type IResponseType } from '../../../../../../types/responseType';\n\nconst { Header, Footer, Sider, Content } = Layout;\nconst { TextArea } = Input;\ninterface IProps {\n  userId: string;\n  userName: string;\n}\nconst ChatWindow: FC<IProps> = (props) => {\n  const { userName, userId } = props; // 目标用户\n  // 目标聊天用户\n  const [targetUser, setTargetUser] = useState<string>(userId);\n  const [targetUserName, setTargetUserName] = useState<string>(userName);\n\n  const [chatQueue, setChatQueue] = useState<IChatQueue[]>([]);\n  const [chatQueueTotal, setChatQueueTotal] = useState<number>(0);\n\n  const [chatContent, setContent] = useState<string>('');\n  const login = useLoginMsg();\n\n  const [chatWebSocket, setChatWebSocket] = useState<CommonWebSocket | null>(null); // 发布聊天\n  const [historyWebSocket, setHistoryWebSocket] = useState<CommonWebSocket | null>(null); // 聊天记录\n  const [queueWebSocket, setQueueWebSocket] = useState<CommonWebSocket | null>(null); // 聊天队列\n  useEffect(() => {\n    // 获取聊天队列(当前登陆人)\n    const params = {\n      targetUser: login.userMsg.userId, // 当前登陆人\n      targetChatUser: targetUser // 目标聊天用户是否再聊天队列里\n    };\n    const webSocket = new CommonWebSocket(CHAT_QUEUE, params);\n    setQueueWebSocket(webSocket);\n    webSocket.websocket.onmessage = function (e) {\n      const data: IResponseType<IPage<IChatQueue[]>> = JSON.parse(e.data);\n      if (data.status === 200) {\n        setChatQueue(data.data.list);\n        setChatQueueTotal(data.data.count);\n      }\n    };\n  }, [login.userMsg.userId]);\n  // 聊天发布(交互socket)\n  useEffect(() => {\n    if (targetUser && login.userMsg.userId) {\n      const params = {\n        targetUser,\n        sourceUser: login.userMsg.userId\n      };\n      const webSocket = new CommonWebSocket(CHAT, params);\n      setChatWebSocket(webSocket);\n      webSocket.websocket.onmessage = function (e) {\n        if (historyWebSocket) {\n          historyWebSocket.sendSocketMsg('pull');\n        }\n        if (queueWebSocket) {\n          queueWebSocket.sendSocketMsg('pull');\n        }\n      };\n      webSocket.websocket.onopen = function () {\n        console.log('建立成功');\n      };\n    }\n  }, [targetUser, login.userMsg.userId, historyWebSocket]);\n  // 聊天记录\n  const [contentHistory, setContentHistory] = useState<IChatQueue[]>([]);\n  const [contentHistoryTotal, setContentHistoryTotal] = useState<number>(0);\n  useEffect(() => {\n    if (targetUser) {\n      const params = {\n        targetUser,\n        sourceUser: login.userMsg.userId,\n        limit: 30000\n      };\n      const webSocket = new CommonWebSocket(CHAT_CONTENT, params);\n      setHistoryWebSocket(webSocket);\n      webSocket.websocket.onmessage = function (e) {\n        const data: IResponseType<IPage<IChatQueue[]>> = JSON.parse(e.data);\n        if (data.status === 200) {\n          setContentHistory(data.data.list);\n        }\n        if (queueWebSocket) {\n          queueWebSocket.sendSocketMsg('pull');\n        }\n      };\n      webSocket.websocket.onopen = function () {\n        console.log('建立成功');\n      };\n    }\n  }, [targetUser, queueWebSocket]);\n  // 聊天输入\n  const chatInp = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    if (e.currentTarget && e.currentTarget.value !== undefined && e.currentTarget.value !== null) {\n      setContent(e.currentTarget.value);\n    }\n  };\n  const publishContent = () => {\n    if (chatWebSocket) {\n      chatWebSocket.sendSocketMsg(chatContent);\n      setContent('');\n    }\n  };\n  const [currentIndex, setCurrentIndex] = useState<number>(0);\n  const userClick = (item: IChatQueue, index: number) => {\n    setTargetUser(item.sourceUser.userId);\n    setTargetUserName(item.sourceUser.userName);\n    setCurrentIndex(index);\n  };\n\n  const contentRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    console.log(contentRef.current?.offsetHeight, contentRef.current?.scrollHeight);\n    if (contentRef.current && contentRef.current.offsetHeight <= contentRef.current.scrollHeight) {\n      contentRef.current.scrollTop = contentRef.current.scrollHeight; // -contentRef.current.offsetHeight\n    }\n  }, [contentRef.current, contentHistory.length]);\n  return (\n    <ChatWindowWrapper>\n      <Layout>\n        <Sider className=\"gb-chat-side\">\n          <div className=\"recent-title\">近期消息</div>\n          <ul className=\"chat-queue\">\n            {chatQueue &&\n              chatQueue.length !== 0 &&\n              chatQueue.map((item, index) => {\n                return (\n                  <li\n                    key={item.id}\n                    onClick={(e) => {\n                      userClick(item, index);\n                    }}\n                    className={currentIndex === index ? 'active' : ''}\n                  >\n                    <div className=\"img-container\">\n                      <img src={item.sourceUser.avatarUrl} />\n                    </div>\n                    <div className=\"right-container\">\n                      <div className=\"user-name\">{item.sourceUser.userName}</div>\n                      <div className=\"content text-nowrap\">{item.content}</div>\n                    </div>\n                  </li>\n                );\n              })}\n          </ul>\n        </Sider>\n        <Layout>\n          <Header className=\"gb-chat-header\">{targetUserName}</Header>\n          <Content className=\"gb-chat\" ref={contentRef}>\n            <ul className=\"chat-history\">\n              {contentHistory &&\n                contentHistory.length !== 0 &&\n                contentHistory.map((item) => {\n                  return (\n                    <li\n                      key={item.id}\n                      className={item.sourceUser.userId !== targetUser ? 'active' : ''}\n                    >\n                      <div className=\"img-container\">\n                        <img src={item.sourceUser.avatarUrl} />\n                      </div>\n                      <div className=\"content-container\">\n                        <div className=\"content\">{item.content}</div>\n                        <div className=\"time\">{moment(item.createTime).fromNow()}</div>\n                      </div>\n                    </li>\n                  );\n                })}\n            </ul>\n          </Content>\n          <Footer className=\"gb-chat-footer\">\n            <div className=\"chat-inp\">\n              <TextArea\n                rows={3}\n                maxLength={500}\n                value={chatContent}\n                onChange={(e) => {\n                  chatInp(e);\n                }}\n              />\n            </div>\n            <div className=\"publish-container\">\n              <div\n                className=\"publish-btn\"\n                onClick={(e) => {\n                  publishContent();\n                }}\n              >\n                发布\n              </div>\n            </div>\n          </Footer>\n        </Layout>\n      </Layout>\n    </ChatWindowWrapper>\n  );\n};\nexport default memo(ChatWindow);\n","import React, { memo, type FC } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { Layout } from 'antd';\nimport HeaderTop from '../../../../components/header/index';\nimport { ChatWrapper } from './style';\nimport ChatWindow from './childCpn/chatWindow';\nconst { Header, Footer, Sider, Content } = Layout;\nconst ChatDetail: FC = () => {\n  const location = useLocation();\n  const { userId, userName } = location.state;\n  return (\n    <ChatWrapper>\n      <Layout>\n        <Header>\n          <HeaderTop />\n        </Header>\n        <Content className=\"gb-content\">\n          <div className=\"gb-content-inner\">\n            <div className=\"title\">我的消息</div>\n            <ChatWindow userId={userId} userName={userName} />\n          </div>\n        </Content>\n      </Layout>\n    </ChatWrapper>\n  );\n};\nexport default memo(ChatDetail);\n"],"names":["ChatWrapper","styled","div","chatWindow","ChatWindowWrapper","CommonWebSocket","constructor","url","params","keys","Object","query","i","length","key","socketUrl","this","websocket","WebSocket","WEBSOCKET_HOST_NAME","getSocketMsg","Promise","resolve","reject","onmessage","e","res","JSON","parse","data","sendSocketMsg","console","log","readyState","send","Header","Footer","Sider","Content","Layout","TextArea","Input","ChatWindow","props","userName","userId","targetUser","setTargetUser","useState","targetUserName","setTargetUserName","chatQueue","setChatQueue","chatQueueTotal","setChatQueueTotal","chatContent","setContent","login","useLoginMsg","chatWebSocket","setChatWebSocket","historyWebSocket","setHistoryWebSocket","queueWebSocket","setQueueWebSocket","useEffect","userMsg","targetChatUser","webSocket","status","list","count","sourceUser","onopen","contentHistory","setContentHistory","contentHistoryTotal","setContentHistoryTotal","limit","currentIndex","setCurrentIndex","contentRef","useRef","current","offsetHeight","scrollHeight","scrollTop","React","className","map","item","index","id","onClick","userClick","src","avatarUrl","content","ref","moment","createTime","fromNow","rows","maxLength","value","onChange","currentTarget","undefined","chatInp","memo","ChatDetail","location","useLocation","state","HeaderTop"],"sourceRoot":""}