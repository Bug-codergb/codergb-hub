{"version":3,"file":"static/js/5296.0483859f.chunk.js","mappings":"8KAIO,MAAMA,EAAcA,KACXC,EAAAA,EAAAA,KAA0CC,GAC/CA,EAAMC,MAAM,CAAC,eAAgB,W,qHCLjC,MAAMC,EAAkBC,EAAAA,GAAOC,GAAI;;iBAEzB;;kBAEC;;EAGLC,EAAsBF,EAAAA,GAAOC,GAAI;;;;;eAK/B;gBACC;;;;;;;;;oBASI;;mBAED;;oBAEC;;;;mBAID;;;;iFCtBnB,MAKME,EAAWC,GACR,CACL,CACEC,MAAO,OACPC,UAAW,OACXC,OAAQA,CAACC,EAAcC,IAEnBC,EAAAA,cAACR,EAAmB,KAClBQ,EAAAA,cAAA,OAAKC,UAAU,kBACbD,EAAAA,cAAA,OAAKC,UAAU,gBAAgBC,QAAUC,GAdhCC,EAACL,EAAiBL,KACvCA,EAAU,GAAEW,EAAAA,MAAiBN,EAAKO,KAAM,CACtCC,SAAS,GACT,EAWyDH,CAAeL,EAAML,IAClEM,EAAAA,cAAA,OAAKQ,IAAKT,EAAKU,OAAQC,IAAKX,EAAKY,SAGrCX,EAAAA,cAAA,OAAKC,UAAU,mBACbD,EAAAA,cAAA,OAAKC,UAAU,aACbD,EAAAA,cAAA,KAAGC,UAAU,QAAQF,EAAKY,MAC1BX,EAAAA,cAAA,KAAGC,UAAU,QAAQF,EAAKa,iBAOtC,CACEjB,MAAO,OACPC,UAAW,WACXC,OAAQA,CAACC,EAAcC,KACrB,MAAM,SAAEc,GAAad,EACrB,OAAiB,IAAbc,EACKb,EAAAA,cAACc,EAAAA,EAAW,MAEZd,EAAAA,cAACe,EAAAA,EAAoB,KAC9B,GAGJ,CACEpB,MAAO,SACPC,UAAW,aACXoB,OAAQA,CAACC,EAAGC,IAAM,IAAIC,KAAKF,EAAEG,YAAYC,UAAY,IAAIF,KAAKD,EAAEE,YAAYC,UAC5ExB,OAASyB,GACAC,IAAOD,GAAME,OAAO,qBAG/B,CACE7B,MAAO,MACPC,UAAW,QACXC,OAAS4B,GACAA,GAAgB,ICjDzBC,EAAeA,KACnB,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAAsB,KAC/CC,EAAOC,IAAYF,EAAAA,EAAAA,UAAiB,IACpCG,EAAeC,IAAoBJ,EAAAA,EAAAA,UAA+B,YACnEK,GAAQjD,EAAAA,EAAAA,KACRS,GAAWyC,EAAAA,EAAAA,MACXC,EAAqBA,CAACC,EAAgBC,EAAgBC,MAC1DC,EAAAA,EAAAA,IAAmDH,EAAQC,EAAQC,GAAOE,MAAMC,IAC1EA,EAAKC,SACPZ,EAASW,EAAKA,KAAKZ,OACnBF,EAAYc,EAAKA,KAAKE,MACxB,GACA,GAEJC,EAAAA,EAAAA,YAAU,KACRT,EAAmBF,EAAMY,QAAQT,OAAQ,EAAG,EAAE,GAC7C,IACH,MAAMU,EAAe,CACnBC,SAAUA,CAACC,EAA8BC,KACvCC,QAAQC,IAAI,iBAAkBF,EAAa,GAO/C,OACElD,EAAAA,cAACX,EAAe,KACdW,EAAAA,cAAA,OAAKC,UAAU,eAAc,UAC5B0B,GAAgC,IAApBA,EAAS0B,QACpBrD,EAAAA,cAACsD,EAAAA,EAAK,CACJP,aAAc,CACZQ,KAAMvB,KACHe,GAELS,OAAQ,KACR/D,QAASA,EAAQC,GACjB+D,WAAY9B,EACZ+B,WAAY,CACVC,SAAU,EACVC,MAAO9B,EACPkB,SAAW7C,GAnBKA,KACxBgD,QAAQC,IAAIjD,GACZiC,EAAmBF,EAAMY,QAAQT,OAAkB,GAATlC,EAAI,GAAQ,EAAE,EAiB/B0D,CAAiB1D,MAIxB,EAGtB,OAAe2D,EAAAA,EAAAA,MAAKpC,E","sources":["webpack://codergb-hub-client/./src/hook/useLoginMsg/index.tsx","webpack://codergb-hub-client/./src/views/profile/pages/playlist/style.tsx","webpack://codergb-hub-client/./src/views/profile/pages/playlist/config.tsx","webpack://codergb-hub-client/./src/views/profile/pages/playlist/index.tsx"],"sourcesContent":["import { type Map } from 'immutable';\nimport { useSelector } from 'react-redux';\nimport { type ILogin } from '../../types/login/ILogin';\n\nexport const useLoginMsg = (): ILogin => {\n  const login = useSelector<Map<string, ILogin>, ILogin>((state) => {\n    return state.getIn(['loginReducer', 'login']) as ILogin;\n  });\n  return login;\n};\n","import styled from 'styled-components';\nexport const PlaylistWrapper = styled.div`\n  .title-label {\n    font-size: ${30 / 40}rem;\n    font-weight: bolder;\n    margin: 0 0 ${16 / 40}rem 0;\n  }\n`;\nexport const PlaylistItemWrapper = styled.div`\n  display: flex;\n  align-items: flex-start;\n  .left-container {\n    .img-container {\n      width: ${180 / 40}rem;\n      height: ${96 / 40}rem;\n      overflow: hidden;\n      img {\n        width: 100%;\n        border-radius: 4px;\n      }\n    }\n  }\n  .right-container {\n    margin: 0 0 0 ${24 / 40}rem;\n    .name {\n      font-size: ${20 / 40}rem;\n      font-weight: bold;\n      margin: 0 0 ${10 / 40}rem;\n      color: #0d0d0d;\n    }\n    .desc {\n      font-size: ${16 / 40}rem;\n      color: #909090;\n    }\n  }\n`;\n","import React from 'react';\nimport type { ColumnsType } from 'antd/es/table';\nimport { EyeInvisibleOutlined, EyeOutlined } from '@ant-design/icons';\nimport moment from 'moment';\nimport { PlaylistItemWrapper } from './style';\nimport { IPlaylist } from '../../../../types/playlist/IPlaylist';\nimport { USER_PLAYLIST } from '../../../../constant/menu';\nimport { NavigateFunction } from 'react-router/dist/lib/hooks';\n\nconst playlistRouter = (item: IPlaylist, navigate: NavigateFunction) => {\n  navigate(`${USER_PLAYLIST}/${item.id}`, {\n    replace: false\n  });\n};\nconst columns = (navigate: NavigateFunction): ColumnsType<IPlaylist> => {\n  return [\n    {\n      title: '播放列表',\n      dataIndex: 'name',\n      render: (text: string, item) => {\n        return (\n          <PlaylistItemWrapper>\n            <div className=\"left-container\">\n              <div className=\"img-container\" onClick={(e) => playlistRouter(item, navigate)}>\n                <img src={item.picUrl} alt={item.name} />\n              </div>\n            </div>\n            <div className=\"right-container\">\n              <div className=\"right-msg\">\n                <p className=\"name\">{item.name}</p>\n                <p className=\"desc\">{item.description}</p>\n              </div>\n            </div>\n          </PlaylistItemWrapper>\n        );\n      }\n    },\n    {\n      title: '公开范围',\n      dataIndex: 'isPublic',\n      render: (text: string, item: IPlaylist) => {\n        const { isPublic } = item;\n        if (isPublic === 1) {\n          return <EyeOutlined />;\n        } else {\n          return <EyeInvisibleOutlined />;\n        }\n      }\n    },\n    {\n      title: '上次更新时间',\n      dataIndex: 'createTime',\n      sorter: (a, b) => new Date(a.createTime).getTime() - new Date(b.createTime).getTime(),\n      render: (time: string) => {\n        return moment(time).format('yyyy-MM-DD HH:mm');\n      }\n    },\n    {\n      title: '视频数',\n      dataIndex: 'video',\n      render: (video: number | null) => {\n        return video ? video : 0;\n      }\n    }\n  ];\n};\nexport { columns };\n","import React, { memo, FC, ReactElement, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Table } from 'antd';\nimport { PlaylistWrapper } from './style';\nimport { IPlaylist } from '../../../../types/playlist/IPlaylist';\nimport { getUserPlaylist } from '../../../../network/playlist';\nimport { useLoginMsg } from '../../../../hook/useLoginMsg';\nimport { IResponseType } from '../../../../types/responseType';\nimport { IPage } from '../../../../types/IPage';\nimport { IVideo } from '../../../../types/video/IVideo';\nimport { columns } from './config';\n\nconst Playlist: FC = (): ReactElement => {\n  const [playlist, setPlaylist] = useState<IPlaylist[]>([]);\n  const [count, setCount] = useState<number>(0);\n  const [selectionType, setSelectionType] = useState<'checkbox' | 'radio'>('checkbox');\n  const login = useLoginMsg();\n  const navigate = useNavigate();\n  const getUserPlaylistReq = (userId: string, offset: number, limit: number) => {\n    getUserPlaylist<IResponseType<IPage<IPlaylist[]>>>(userId, offset, limit).then((data) => {\n      if (data.status) {\n        setCount(data.data.count);\n        setPlaylist(data.data.list);\n      }\n    });\n  };\n  useEffect(() => {\n    getUserPlaylistReq(login.userMsg.userId, 0, 4);\n  }, []);\n  const rowSelection = {\n    onChange: (selectedRowKeys: React.Key[], selectedRows: IPlaylist[]) => {\n      console.log('selectedRows: ', selectedRows);\n    }\n  };\n  const pageChangeHandle = (e: number) => {\n    console.log(e);\n    getUserPlaylistReq(login.userMsg.userId, (e - 1) * 4, 4);\n  };\n  return (\n    <PlaylistWrapper>\n      <div className=\"title-label\">我的播放列表</div>\n      {playlist && playlist.length !== 0 && (\n        <Table\n          rowSelection={{\n            type: selectionType,\n            ...rowSelection\n          }}\n          rowKey={'id'}\n          columns={columns(navigate)}\n          dataSource={playlist}\n          pagination={{\n            pageSize: 4,\n            total: count,\n            onChange: (e) => pageChangeHandle(e)\n          }}\n        />\n      )}\n    </PlaylistWrapper>\n  );\n};\nexport default memo(Playlist);\n"],"names":["useLoginMsg","useSelector","state","getIn","PlaylistWrapper","styled","div","PlaylistItemWrapper","columns","navigate","title","dataIndex","render","text","item","React","className","onClick","e","playlistRouter","USER_PLAYLIST","id","replace","src","picUrl","alt","name","description","isPublic","EyeOutlined","EyeInvisibleOutlined","sorter","a","b","Date","createTime","getTime","time","moment","format","video","Playlist","playlist","setPlaylist","useState","count","setCount","selectionType","setSelectionType","login","useNavigate","getUserPlaylistReq","userId","offset","limit","getUserPlaylist","then","data","status","list","useEffect","userMsg","rowSelection","onChange","selectedRowKeys","selectedRows","console","log","length","Table","type","rowKey","dataSource","pagination","pageSize","total","pageChangeHandle","memo"],"sourceRoot":""}