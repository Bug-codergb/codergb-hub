{"version":3,"file":"static/js/7587.00511668.chunk.js","mappings":"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","sources":["webpack://codergb-hub-client/./src/hook/useLoginMsg/index.tsx","webpack://codergb-hub-client/./src/network/video/index.tsx","webpack://codergb-hub-client/./src/views/profile/pages/dataAnalyze/childCpn/playData/style.tsx","webpack://codergb-hub-client/./src/views/profile/pages/dataAnalyze/childCpn/playData/index.tsx","webpack://codergb-hub-client/./src/views/profile/pages/dataAnalyze/childCpn/thumbData/style.tsx","webpack://codergb-hub-client/./src/views/profile/pages/dataAnalyze/childCpn/thumbData/index.tsx","webpack://codergb-hub-client/./src/views/profile/pages/dataAnalyze/style.tsx","webpack://codergb-hub-client/./src/views/profile/pages/dataAnalyze/index.tsx"],"sourcesContent":["import { type Map } from 'immutable';\nimport { useSelector } from 'react-redux';\nimport { type ILogin } from '../../types/login/ILogin';\n\nexport const useLoginMsg = (): ILogin => {\n  const login = useSelector<Map<string, ILogin>, ILogin>((state) => {\n    return state.getIn(['loginReducer', 'login']) as ILogin;\n  });\n  return login;\n};\n","import gbRequest from '../index';\nimport { type IResponseType } from '../../types/responseType';\nexport async function uploadVideo<T = IResponseType<any>>(formData: FormData): Promise<T> {\n  return await gbRequest.post<T>({\n    url: '/video/upload',\n    data: formData,\n    headers: {\n      'Content-type': 'multipart/form-data'\n    }\n  });\n}\n// 视频合并\nexport async function mergeVideo<T = IResponseType<any>>(\n  path: string,\n  hash: string,\n  name: string,\n  type: string,\n  total: number\n): Promise<T> {\n  return await gbRequest.post<T>({\n    url: '/video/merge',\n    data: {\n      dest: path,\n      hash,\n      originalname: name,\n      type,\n      total\n    }\n  });\n}\n// 创建video\nexport async function createVideo<T = IResponseType<any>>(\n  videoId: string,\n  title: string,\n  desc: string,\n  imgId: string,\n  playlistId: string,\n  tagIds: string[],\n  cateId: string,\n  dt: number\n) {\n  return await gbRequest.post<T>({\n    url: '/video/create',\n    data: {\n      videoId,\n      title,\n      desc,\n      imgId,\n      playlistId,\n      tagIds,\n      cateId,\n      dt\n    }\n  });\n}\n// 获取所有视频\nexport async function getAllVideo<T = IResponseType<any>>(\n  offset: number,\n  limit: number,\n  keyword: string\n) {\n  return await gbRequest.post<T>({\n    url: '/video/all',\n    params: {\n      offset,\n      limit\n    },\n    data: {\n      keyword\n    }\n  });\n}\n// 获取视频URL\nexport async function getVideoURL<T = IResponseType<any>>(id: string) {\n  return await gbRequest.get<T>({\n    url: `/video/url/${id}`\n  });\n}\nexport async function getVideoDetail<T = IResponseType<any>>(id: string) {\n  return await gbRequest.post<T>({\n    url: `/video/detail/${id}`\n  });\n}\n// 获取用户视频\nexport async function getUserVideo<T = IResponseType<any>>(\n  id: string,\n  keyword: string,\n  offset: number,\n  limit: number\n) {\n  return await gbRequest.post<T>({\n    url: `/user/video/${id}`,\n    params: {\n      offset,\n      limit\n    },\n    data: {\n      keyword\n    }\n  });\n}\n// 获取用户视频\nexport async function getUserHotVideo<T = IResponseType<any>>(\n  id: string,\n  keyword: string,\n  offset: number,\n  limit: number\n) {\n  return await gbRequest.post<T>({\n    url: `/user/video/hot/${id}`,\n    params: {\n      offset,\n      limit\n    },\n    data: {\n      keyword\n    }\n  });\n}\n// 获取订阅用户视频\nexport async function getSubUserVideo<T = IResponseType<any>>(\n  userId: string,\n  offset: number,\n  limit: number,\n  isMonth: number\n) {\n  return await gbRequest.post<T>({\n    url: `/video/sub/user/${userId}`,\n    params: {\n      offset,\n      limit\n    },\n    data: {\n      isMonth\n    }\n  });\n}\n// 获取用户点赞视频\nexport async function getThumbUserVideo<T = IResponseType<any>>(\n  userId: string,\n  offset: number,\n  limit: number\n) {\n  return await gbRequest.post<T>({\n    url: '/video/thumb/user/' + userId,\n    params: {\n      offset,\n      limit\n    }\n  });\n}\n// 获取相关视频\nexport async function getSimilarVideo<T = IResponseType<any>>(\n  id: string,\n  offset: number,\n  limit: number\n) {\n  return await gbRequest.post<T>({\n    url: '/video/similar/' + id,\n    params: {\n      offset,\n      limit\n    }\n  });\n}\nexport async function getCollectionVideo<T = IResponseType<any>>(\n  id: string,\n  offset: number,\n  limit: number\n) {\n  return await gbRequest.post<T>({\n    url: '/video/collection/' + id,\n    params: {\n      offset,\n      limit\n    }\n  });\n}\nexport async function recordVideo<T = IResponseType<any>>(id: string) {\n  return await gbRequest.post<T>({\n    url: '/record/' + id\n  });\n}\nexport async function getUserRecordVideo<T = IResponseType<any>>(id: string) {\n  return await gbRequest.get<T>({\n    url: '/record/user/' + id\n  });\n}\nexport async function getUserRecordThumb<T = IResponseType<any>>(id: string) {\n  return await gbRequest.get<T>({\n    url: '/record/thumb/' + id\n  });\n}\nexport async function addPlayCount<T = IResponseType<any>>(id: string) {\n  return await gbRequest.post<T>({\n    url: 'video/playCount/' + id\n  });\n}\nexport async function getCarousel<T = IResponseType<any>>() {\n  return await gbRequest.get<T>({\n    url: '/video/carousel/all'\n  });\n}\nexport async function getCateVideo<T = IResponseType<any>>(\n  id: string,\n  offset: number,\n  limit: number\n) {\n  return await gbRequest.post<T>({\n    url: '/video/cate/' + id,\n    params: {\n      offset,\n      limit\n    }\n  });\n}\n","import styled from 'styled-components';\nexport const PlayDataWrapper = styled.div`\n  .charts-container {\n    width: ${750 / 40}rem;\n    height: ${300 / 40}rem;\n    background-color: #fff;\n  }\n`;\n","import React, { memo, useEffect, useRef } from 'react';\nimport * as echarts from 'echarts';\nimport { PlayDataWrapper } from './style';\nimport { type IResponseType } from '../../../../../../types/responseType';\nimport { useLoginMsg } from '../../../../../../hook/useLoginMsg';\nimport { getUserRecordVideo } from '../../../../../../network/video';\ninterface IRecord {\n  count: number;\n  createTime: string;\n}\nconst PlayData = () => {\n  const divRef = useRef<HTMLDivElement>(null);\n  const login = useLoginMsg();\n  useEffect(() => {\n    if (divRef.current) {\n      getUserRecordVideo<IResponseType<IRecord[]>>(login.userMsg.userId).then((res) => {\n        if (res.status === 200 && res.data.length !== 0) {\n          const key = [];\n          const value = [];\n          for (const item of res.data) {\n            key.push(item.createTime);\n            value.push(item.count);\n          }\n          const chartDom = divRef.current;\n          const myChart = echarts.init(chartDom);\n          const option = {\n            title: {\n              text: '作品近一个月播放量',\n              textAlign: 'center',\n              left: '50%',\n              textStyle: {\n                fontSize: 12\n              }\n            },\n            legend: {\n              show: false\n            },\n            tooltip: {\n              show: true,\n              trigger: 'axis'\n            },\n            xAxis: {\n              type: 'category',\n              data: key\n            },\n            yAxis: {\n              type: 'value'\n            },\n            grid: {\n              left: '5%',\n              bottom: 0,\n              top: '15%',\n              right: '5%',\n              containLabel: true\n            },\n            series: [\n              {\n                data: value,\n                type: 'line',\n                smooth: true,\n                name: '播放量',\n                lineStyle: {\n                  color: '#ec5b56'\n                },\n                itemStyle: {\n                  color: '#ec5b56'\n                }\n              }\n            ]\n          };\n\n          option && myChart.setOption(option);\n          window.addEventListener('resize', () => {\n            myChart.resize();\n          });\n        }\n      });\n    }\n  }, [divRef, divRef.current]);\n  return (\n    <PlayDataWrapper>\n      <div className=\"charts-container\" ref={divRef}></div>\n    </PlayDataWrapper>\n  );\n};\nexport default memo(PlayData);\n","import styled from 'styled-components';\nexport const ThumbDataWrapper = styled.div`\n  .charts-container {\n    width: ${750 / 40}rem;\n    height: ${300 / 40}rem;\n    background-color: #fff;\n  }\n`;\n","import React, { memo, type FC, useRef, useEffect } from 'react';\nimport * as echarts from 'echarts';\nimport { ThumbDataWrapper } from './style';\nimport { getUserRecordThumb } from '../../../../../../network/video';\nimport { type IResponseType } from '../../../../../../types/responseType';\nimport { useLoginMsg } from '../../../../../../hook/useLoginMsg';\n\ninterface IRecord {\n  count: number;\n  createTime: string;\n}\nconst ThumbData: FC = () => {\n  const divRef = useRef<HTMLDivElement>(null);\n  const login = useLoginMsg();\n  useEffect(() => {\n    if (divRef.current) {\n      getUserRecordThumb<IResponseType<IRecord[]>>(login.userMsg.userId).then((res) => {\n        if (res.status === 200 && res.data.length !== 0) {\n          const key = [];\n          const value = [];\n          for (const item of res.data) {\n            key.push(item.createTime);\n            value.push(item.count);\n          }\n          const chartDom = divRef.current;\n          const myChart = echarts.init(chartDom);\n          const option = {\n            title: {\n              text: '作品近一个月作品被点赞数',\n              textAlign: 'center',\n              left: '50%',\n              textStyle: {\n                fontSize: 12\n              }\n            },\n            legend: {\n              show: false\n            },\n            tooltip: {\n              show: true,\n              trigger: 'axis'\n            },\n            xAxis: {\n              type: 'category',\n              data: key\n            },\n            yAxis: {\n              type: 'value'\n            },\n            grid: {\n              left: '5%',\n              bottom: 0,\n              top: '15%',\n              right: '5%',\n              containLabel: true\n            },\n            series: [\n              {\n                data: value,\n                type: 'line',\n                smooth: true,\n                name: '点赞数',\n\n                lineStyle: {\n                  color: '#61c373'\n                },\n                itemStyle: {\n                  color: '#61c373'\n                }\n              }\n            ]\n          };\n\n          option && myChart.setOption(option);\n          window.addEventListener('resize', () => {\n            myChart.resize();\n          });\n        }\n      });\n    }\n  }, [divRef, divRef.current]);\n  return (\n    <ThumbDataWrapper>\n      <div className=\"charts-container\" ref={divRef}></div>\n    </ThumbDataWrapper>\n  );\n};\nexport default memo(ThumbData);\n","import styled from 'styled-components';\nexport const DataAnalyzeWrapper = styled.div`\n  .chart-list {\n    .item {\n      display: flex;\n      justify-content: space-between;\n    }\n  }\n`;\n","import React, { memo, FC, ReactElement } from 'react';\nimport PlayData from './childCpn/playData/index';\nimport ThumbData from './childCpn/thumbData';\nimport { DataAnalyzeWrapper } from './style';\nconst DataAnalyze: FC = () => {\n  return (\n    <DataAnalyzeWrapper>\n      <ul className=\"chart-list\">\n        <li className=\"item\">\n          <PlayData />\n          <ThumbData />\n        </li>\n      </ul>\n    </DataAnalyzeWrapper>\n  );\n};\nexport default memo(DataAnalyze);\n"],"names":["useLoginMsg","useSelector","state","getIn","async","uploadVideo","formData","gbRequest","post","url","data","headers","createVideo","videoId","title","desc","imgId","playlistId","tagIds","cateId","dt","getAllVideo","offset","limit","keyword","params","getVideoURL","id","get","getVideoDetail","getUserVideo","getUserHotVideo","getSubUserVideo","userId","isMonth","getThumbUserVideo","getSimilarVideo","getCollectionVideo","recordVideo","getUserRecordVideo","getUserRecordThumb","addPlayCount","getCarousel","getCateVideo","PlayDataWrapper","styled","div","PlayData","divRef","useRef","login","useEffect","current","userMsg","then","res","status","length","key","value","item","push","createTime","count","chartDom","myChart","echarts","option","text","textAlign","left","textStyle","fontSize","legend","show","tooltip","trigger","xAxis","type","yAxis","grid","bottom","top","right","containLabel","series","smooth","name","lineStyle","color","itemStyle","setOption","window","addEventListener","resize","React","className","ref","memo","ThumbDataWrapper","ThumbData","DataAnalyzeWrapper","DataAnalyze"],"sourceRoot":""}