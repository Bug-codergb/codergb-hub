{"version":3,"file":"static/js/4914.8888abe3.chunk.js","mappings":"+iBAEOA,eAAeC,EAAoCC,GACxD,aAAaC,EAAAA,EAAUC,KAAQ,CAC7BC,IAAK,gBACLC,KAAMJ,EACNK,QAAS,CACP,eAAgB,wBAGtB,CAqBOP,eAAeQ,EACpBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,aAAab,EAAAA,EAAUC,KAAQ,CAC7BC,IAAK,gBACLC,KAAM,CACJG,UACAC,QACAC,OACAC,QACAC,aACAC,SACAC,SACAC,OAGN,CAEOhB,eAAeiB,EACpBC,EACAC,EACAC,GAEA,aAAajB,EAAAA,EAAUC,KAAQ,CAC7BC,IAAK,aACLgB,OAAQ,CACNH,SACAC,SAEFb,KAAM,CACJc,YAGN,CAEOpB,eAAesB,EAAoCC,GACxD,aAAapB,EAAAA,EAAUqB,IAAO,CAC5BnB,IAAM,cAAakB,KAEvB,CACOvB,eAAeyB,EAAuCF,GAC3D,aAAapB,EAAAA,EAAUC,KAAQ,CAC7BC,IAAM,iBAAgBkB,KAE1B,CAEOvB,eAAe0B,EACpBH,EACAH,EACAF,EACAC,GAEA,aAAahB,EAAAA,EAAUC,KAAQ,CAC7BC,IAAM,eAAckB,IACpBF,OAAQ,CACNH,SACAC,SAEFb,KAAM,CACJc,YAGN,CAEOpB,eAAe2B,EACpBJ,EACAH,EACAF,EACAC,GAEA,aAAahB,EAAAA,EAAUC,KAAQ,CAC7BC,IAAM,mBAAkBkB,IACxBF,OAAQ,CACNH,SACAC,SAEFb,KAAM,CACJc,YAGN,CAEOpB,eAAe4B,EACpBC,EACAX,EACAC,EACAW,GAEA,aAAa3B,EAAAA,EAAUC,KAAQ,CAC7BC,IAAM,mBAAkBwB,IACxBR,OAAQ,CACNH,SACAC,SAEFb,KAAM,CACJwB,YAGN,CAEO9B,eAAe+B,EACpBF,EACAX,EACAC,GAEA,aAAahB,EAAAA,EAAUC,KAAQ,CAC7BC,IAAK,qBAAuBwB,EAC5BR,OAAQ,CACNH,SACAC,UAGN,CAEOnB,eAAegC,EACpBT,EACAL,EACAC,GAEA,aAAahB,EAAAA,EAAUC,KAAQ,CAC7BC,IAAK,kBAAoBkB,EACzBF,OAAQ,CACNH,SACAC,UAGN,CACOnB,eAAeiC,EACpBV,EACAL,EACAC,GAEA,aAAahB,EAAAA,EAAUC,KAAQ,CAC7BC,IAAK,qBAAuBkB,EAC5BF,OAAQ,CACNH,SACAC,UAGN,CACOnB,eAAekC,EAAoCX,GACxD,aAAapB,EAAAA,EAAUC,KAAQ,CAC7BC,IAAK,WAAakB,GAEtB,CACOvB,eAAemC,EAA2CZ,GAC/D,aAAapB,EAAAA,EAAUqB,IAAO,CAC5BnB,IAAK,gBAAkBkB,GAE3B,CACOvB,eAAeoC,EAA2Cb,GAC/D,aAAapB,EAAAA,EAAUqB,IAAO,CAC5BnB,IAAK,iBAAmBkB,GAE5B,CACOvB,eAAeqC,EAAqCd,GACzD,aAAapB,EAAAA,EAAUC,KAAQ,CAC7BC,IAAK,mBAAqBkB,GAE9B,CACOvB,eAAesC,IACpB,aAAanC,EAAAA,EAAUqB,IAAO,CAC5BnB,IAAK,uBAET,CACOL,eAAeuC,EACpBhB,EACAL,EACAC,GAEA,aAAahB,EAAAA,EAAUC,KAAQ,CAC7BC,IAAK,eAAiBkB,EACtBF,OAAQ,CACNH,SACAC,UAGN,C,+FCtNO,MAAMqB,E,SAAeC,GAAOC,GAAI;;;2DCYvC,MAAMC,EAAYA,KAChB,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAiB,IACpCC,EAAYC,IAAiBF,EAAAA,EAAAA,UAAmB,IACjDG,GAAQC,EAAAA,EAAAA,KAA0CC,GAC/CA,EAAMC,MAAM,CAAC,eAAgB,YAEhCC,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAU,MACRxB,EAAAA,EAAAA,IAAkDkB,EAAMO,QAAQ3B,OAAQ,EAAG,IAAI4B,MAAMnD,IAC/D,MAAhBA,EAAKoD,SACPb,EAASvC,EAAKA,KAAKsC,OACnBI,EAAc1C,EAAKA,KAAKqD,MAC1B,GACA,GACD,IAEH,MAAMC,EAAqBC,IACzBR,EAAS,eAAgB,CACvBS,SAAS,EACTX,MAAO,CACL5B,GAAIsC,EAAKtC,KAEX,EAEJ,OACEwC,EAAAA,cAACvB,EAAY,KACVO,GACCgB,EAAAA,cAACC,EAAAA,GAAW,CACVC,IACElB,GAAoC,IAAtBA,EAAWmB,QAAgBnB,EAAW,GAAGoB,MACnDpB,EAAW,GAAGoB,MAAMC,OACpBnB,EAAMO,QAAQa,WAGpBN,EAAAA,cAAA,OAAKO,UAAU,iBACZvB,GACCgB,EAAAA,cAAA,OACEQ,IACExB,GAAoC,IAAtBA,EAAWmB,OACrBnB,EAAW,GAAGoB,MAAMC,OACpBnB,EAAMO,QAAQa,aAK1BN,EAAAA,cAAA,KAAGO,UAAU,eAAc,SAC3BP,EAAAA,cAAA,KAAGO,UAAU,aAAarB,EAAMO,QAAQgB,UACxCT,EAAAA,cAAA,OAAKO,UAAU,YACbP,EAAAA,cAAA,OAAKO,UAAU,aAAa1B,EAAM,OAClCmB,EAAAA,cAAA,OAAKO,UAAU,eACZvB,GAAcA,EAAW,GACtB0B,IAAO1B,GAAcA,EAAW,GAAKA,EAAW,GAAG2B,WAAa,IAAIC,OAClE,oBAEF,KAAK,OAIbZ,EAAAA,cAAA,OAAKO,UAAU,UAGnBP,EAAAA,cAACa,EAAAA,GAAY,KACXb,EAAAA,cAAA,MAAIO,UAAU,YACXvB,GACuB,IAAtBA,EAAWmB,QACXnB,EAAW8B,KAAKhB,GAEZE,EAAAA,cAAA,MAAIe,IAAKjB,EAAKtC,IACZwC,EAAAA,cAAA,OACEO,UAAU,kBACVS,QAAUC,IACRpB,EAAkBC,EAAKM,MAAM,GAG/BJ,EAAAA,cAAA,OAAKQ,IAAKV,EAAKM,MAAMC,UAEvBL,EAAAA,cAAA,OAAKO,UAAU,oBACbP,EAAAA,cAAA,KACEO,UAAU,gCACVS,QAAUC,IACRpB,EAAkBC,EAAKM,MAAM,GAG9BN,EAAKM,MAAMc,MAEdlB,EAAAA,cAAA,OAAKO,UAAU,QACbP,EAAAA,cAAA,OAAKO,UAAU,aAAaT,EAAKqB,KAAKV,SAAS,KAC/CT,EAAAA,cAAA,OAAKO,UAAU,cAAcT,EAAKM,MAAMgB,UAAU,QAClDpB,EAAAA,cAAA,OAAKO,UAAU,eAAeG,IAAOZ,EAAKuB,YAAYC,UAAU,aAQnE,EAGnB,OAAeC,EAAAA,EAAAA,MAAK3C,E","sources":["webpack://codergb-hub-client/./src/network/video/index.tsx","webpack://codergb-hub-client/./src/views/thumb/style.tsx","webpack://codergb-hub-client/./src/views/thumb/index.tsx"],"sourcesContent":["import gbRequest from '../index';\nimport { type IResponseType } from '../../types/responseType';\nexport async function uploadVideo<T = IResponseType<any>>(formData: FormData): Promise<T> {\n  return await gbRequest.post<T>({\n    url: '/video/upload',\n    data: formData,\n    headers: {\n      'Content-type': 'multipart/form-data'\n    }\n  });\n}\n// 视频合并\nexport async function mergeVideo<T = IResponseType<any>>(\n  path: string,\n  hash: string,\n  name: string,\n  type: string,\n  total: number\n): Promise<T> {\n  return await gbRequest.post<T>({\n    url: '/video/merge',\n    data: {\n      dest: path,\n      hash,\n      originalname: name,\n      type,\n      total\n    }\n  });\n}\n// 创建video\nexport async function createVideo<T = IResponseType<any>>(\n  videoId: string,\n  title: string,\n  desc: string,\n  imgId: string,\n  playlistId: string,\n  tagIds: string[],\n  cateId: string,\n  dt: number\n) {\n  return await gbRequest.post<T>({\n    url: '/video/create',\n    data: {\n      videoId,\n      title,\n      desc,\n      imgId,\n      playlistId,\n      tagIds,\n      cateId,\n      dt\n    }\n  });\n}\n// 获取所有视频\nexport async function getAllVideo<T = IResponseType<any>>(\n  offset: number,\n  limit: number,\n  keyword: string\n) {\n  return await gbRequest.post<T>({\n    url: '/video/all',\n    params: {\n      offset,\n      limit\n    },\n    data: {\n      keyword\n    }\n  });\n}\n// 获取视频URL\nexport async function getVideoURL<T = IResponseType<any>>(id: string) {\n  return await gbRequest.get<T>({\n    url: `/video/url/${id}`\n  });\n}\nexport async function getVideoDetail<T = IResponseType<any>>(id: string) {\n  return await gbRequest.post<T>({\n    url: `/video/detail/${id}`\n  });\n}\n// 获取用户视频\nexport async function getUserVideo<T = IResponseType<any>>(\n  id: string,\n  keyword: string,\n  offset: number,\n  limit: number\n) {\n  return await gbRequest.post<T>({\n    url: `/user/video/${id}`,\n    params: {\n      offset,\n      limit\n    },\n    data: {\n      keyword\n    }\n  });\n}\n// 获取用户视频\nexport async function getUserHotVideo<T = IResponseType<any>>(\n  id: string,\n  keyword: string,\n  offset: number,\n  limit: number\n) {\n  return await gbRequest.post<T>({\n    url: `/user/video/hot/${id}`,\n    params: {\n      offset,\n      limit\n    },\n    data: {\n      keyword\n    }\n  });\n}\n// 获取订阅用户视频\nexport async function getSubUserVideo<T = IResponseType<any>>(\n  userId: string,\n  offset: number,\n  limit: number,\n  isMonth: number\n) {\n  return await gbRequest.post<T>({\n    url: `/video/sub/user/${userId}`,\n    params: {\n      offset,\n      limit\n    },\n    data: {\n      isMonth\n    }\n  });\n}\n// 获取用户点赞视频\nexport async function getThumbUserVideo<T = IResponseType<any>>(\n  userId: string,\n  offset: number,\n  limit: number\n) {\n  return await gbRequest.post<T>({\n    url: '/video/thumb/user/' + userId,\n    params: {\n      offset,\n      limit\n    }\n  });\n}\n// 获取相关视频\nexport async function getSimilarVideo<T = IResponseType<any>>(\n  id: string,\n  offset: number,\n  limit: number\n) {\n  return await gbRequest.post<T>({\n    url: '/video/similar/' + id,\n    params: {\n      offset,\n      limit\n    }\n  });\n}\nexport async function getCollectionVideo<T = IResponseType<any>>(\n  id: string,\n  offset: number,\n  limit: number\n) {\n  return await gbRequest.post<T>({\n    url: '/video/collection/' + id,\n    params: {\n      offset,\n      limit\n    }\n  });\n}\nexport async function recordVideo<T = IResponseType<any>>(id: string) {\n  return await gbRequest.post<T>({\n    url: '/record/' + id\n  });\n}\nexport async function getUserRecordVideo<T = IResponseType<any>>(id: string) {\n  return await gbRequest.get<T>({\n    url: '/record/user/' + id\n  });\n}\nexport async function getUserRecordThumb<T = IResponseType<any>>(id: string) {\n  return await gbRequest.get<T>({\n    url: '/record/thumb/' + id\n  });\n}\nexport async function addPlayCount<T = IResponseType<any>>(id: string) {\n  return await gbRequest.post<T>({\n    url: 'video/playCount/' + id\n  });\n}\nexport async function getCarousel<T = IResponseType<any>>() {\n  return await gbRequest.get<T>({\n    url: '/video/carousel/all'\n  });\n}\nexport async function getCateVideo<T = IResponseType<any>>(\n  id: string,\n  offset: number,\n  limit: number\n) {\n  return await gbRequest.post<T>({\n    url: '/video/cate/' + id,\n    params: {\n      offset,\n      limit\n    }\n  });\n}\n","import styled from 'styled-components';\nexport const ThumbWrapper = styled.div`\n  display: flex;\n  align-items: flex-start;\n`;\n","import React, { memo, type FC, ReactElement, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { type Map } from 'immutable';\nimport { ThumbWrapper } from './style';\nimport { type IThumb } from '../../types/thumb/IThumb';\nimport { getThumbUserVideo } from '../../network/video';\nimport { useSelector } from 'react-redux';\nimport { type ILogin } from '../../types/login/ILogin';\nimport { type IResponseType } from '../../types/responseType';\nimport { type IPage } from '../../types/IPage';\nimport { LeftContent, RightContent } from '../user-playlist/style';\nimport moment from 'moment';\nimport { type IVideo } from '../../types/video/IVideo';\nconst Thumb: FC = () => {\n  const [count, setCount] = useState<number>(0);\n  const [videoThumb, setVideoThumb] = useState<IThumb[]>([]);\n  const login = useSelector<Map<string, ILogin>, ILogin>((state) => {\n    return state.getIn(['loginReducer', 'login']) as ILogin;\n  });\n  const navigate = useNavigate();\n  useEffect(() => {\n    getThumbUserVideo<IResponseType<IPage<IThumb[]>>>(login.userMsg.userId, 0, 10).then((data) => {\n      if (data.status === 200) {\n        setCount(data.data.count);\n        setVideoThumb(data.data.list);\n      }\n    });\n  }, []);\n\n  const videoRouterHandle = (item: IVideo) => {\n    navigate('/videoDetail', {\n      replace: true,\n      state: {\n        id: item.id\n      }\n    });\n  };\n  return (\n    <ThumbWrapper>\n      {videoThumb && (\n        <LeftContent\n          bgc={\n            videoThumb && videoThumb.length !== 0 && videoThumb[0].video\n              ? videoThumb[0].video.picUrl\n              : login.userMsg.avatarUrl\n          }\n        >\n          <div className=\"img-container\">\n            {videoThumb && (\n              <img\n                src={\n                  videoThumb && videoThumb.length !== 0\n                    ? videoThumb[0].video.picUrl\n                    : login.userMsg.avatarUrl\n                }\n              />\n            )}\n          </div>\n          <p className=\"later-label\">顶过的视频</p>\n          <p className=\"user-name\">{login.userMsg.userName}</p>\n          <div className=\"vio-info\">\n            <div className=\"vio-count\">{count}个视频</div>\n            <div className=\"update-time\">\n              {videoThumb && videoThumb[0]\n                ? moment(videoThumb && videoThumb[0] ? videoThumb[0].updateTime : '').format(\n                    'yyyy-MM-DD HH:MM'\n                  )\n                : '暂无'}\n              更新\n            </div>\n          </div>\n          <div className=\"mask\"></div>\n        </LeftContent>\n      )}\n      <RightContent>\n        <ul className=\"vio-list\">\n          {videoThumb &&\n            videoThumb.length !== 0 &&\n            videoThumb.map((item) => {\n              return (\n                <li key={item.id}>\n                  <div\n                    className=\"cover-container\"\n                    onClick={(e) => {\n                      videoRouterHandle(item.video);\n                    }}\n                  >\n                    <img src={item.video.picUrl} />\n                  </div>\n                  <div className=\"later-right-info\">\n                    <p\n                      className=\"vio-name text-nowrap-mul-line\"\n                      onClick={(e) => {\n                        videoRouterHandle(item.video);\n                      }}\n                    >\n                      {item.video.name}\n                    </p>\n                    <div className=\"desc\">\n                      <div className=\"user-name\">{item.user.userName}.</div>\n                      <div className=\"play-count\">{item.video.playCount}次观看.</div>\n                      <div className=\"create-time\">{moment(item.createTime).fromNow()}加入</div>\n                    </div>\n                  </div>\n                </li>\n              );\n            })}\n        </ul>\n      </RightContent>\n    </ThumbWrapper>\n  );\n};\nexport default memo(Thumb);\n"],"names":["async","uploadVideo","formData","gbRequest","post","url","data","headers","createVideo","videoId","title","desc","imgId","playlistId","tagIds","cateId","dt","getAllVideo","offset","limit","keyword","params","getVideoURL","id","get","getVideoDetail","getUserVideo","getUserHotVideo","getSubUserVideo","userId","isMonth","getThumbUserVideo","getSimilarVideo","getCollectionVideo","recordVideo","getUserRecordVideo","getUserRecordThumb","addPlayCount","getCarousel","getCateVideo","ThumbWrapper","styled","div","Thumb","count","setCount","useState","videoThumb","setVideoThumb","login","useSelector","state","getIn","navigate","useNavigate","useEffect","userMsg","then","status","list","videoRouterHandle","item","replace","React","LeftContent","bgc","length","video","picUrl","avatarUrl","className","src","userName","moment","updateTime","format","RightContent","map","key","onClick","e","name","user","playCount","createTime","fromNow","memo"],"sourceRoot":""}